type AverageStats = record {
  averageDamageDealt : float64;
  averageEnergyGenerated : float64;
  averageEnergyUsed : float64;
  averageKills : float64;
  averageEnergyWasted : float64;
  averageXpEarned : float64;
};
type BasicStats = record {
  secRemaining : float64;
  energyGenerated : float64;
  damageDealt : float64;
  wonGame : bool;
  botMode : nat;
  deploys : float64;
  damageTaken : float64;
  damageCritic : float64;
  damageEvaded : float64;
  energyChargeRate : float64;
  faction : nat;
  energyUsed : float64;
  gameMode : nat;
  energyWasted : float64;
  xpEarned : float64;
  characterID : text;
  botDifficulty : nat;
  kills : float64;
};
type GameID = nat;
type GamesWithCharacter = record {
  gamesPlayed : nat;
  characterID : text;
  gamesWon : nat;
};
type GamesWithFaction = record {
  gamesPlayed : nat;
  gamesWon : nat;
  factionID : nat;
};
type GamesWithGameMode = record {
  gameModeID : nat;
  gamesPlayed : nat;
  gamesWon : nat;
};
type OverallStats = record {
  totalEnergyGenerated : float64;
  totalGamesMP : nat;
  totalGamesSP : nat;
  totalGamesGameMode : vec GamesWithGameMode;
  totalGamesPlayed : nat;
  totalDamageDealt : float64;
  totalEnergyUsed : float64;
  totalTimePlayed : float64;
  totalEnergyWasted : float64;
  totalKills : float64;
  totalXpEarned : float64;
  totalGamesWithCharacter : vec GamesWithCharacter;
  totalGamesWithFaction : vec GamesWithFaction;
};
type PlayerGamesStats = record {
  gamesLost : nat;
  energyGenerated : float64;
  gamesPlayed : nat;
  totalGamesGameMode : vec GamesWithGameMode;
  totalDamageDealt : float64;
  totalDamageCrit : float64;
  totalDamageTaken : float64;
  energyUsed : float64;
  totalDamageEvaded : float64;
  energyWasted : float64;
  gamesWon : nat;
  totalXpEarned : float64;
  totalGamesWithCharacter : vec GamesWithCharacter;
  totalGamesWithFaction : vec GamesWithFaction;
};
type Statistics = service {
  getAllOnValidation : () -> (vec record { GameID; BasicStats }) query;
  getAverageStats : () -> (AverageStats) query;
  getBasicStats : (GameID) -> (opt BasicStats) query;
  getMyAverageStats : () -> (opt AverageStats) query;
  getMyStats : () -> (opt PlayerGamesStats) query;
  getOverallStats : () -> (OverallStats) query;
  getPlayerAverageStats : (principal) -> (opt AverageStats) query;
  getPlayerStats : (principal) -> (opt PlayerGamesStats) query;
  saveFinishedGame : (GameID, BasicStats) -> (bool, text);
  setGameValid : (GameID) -> (bool);
};
service : Statistics