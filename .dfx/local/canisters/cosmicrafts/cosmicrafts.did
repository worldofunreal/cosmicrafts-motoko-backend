type TokenID = nat;
type RewardsUser = 
 record {
   expiration: nat64;
   finish_date: nat64;
   finished: bool;
   id_reward: nat;
   prize_amount: nat;
   prize_type: PrizeType;
   progress: float64;
   rewardType: RewardType;
   start_date: nat64;
   total: float64;
 };
type RewardType = 
 variant {
   GamesCompleted;
   GamesWon;
   LevelReached;
 };
type PrizeType = 
 variant {
   Chest;
   Flux;
   Shards;
 };
type PlayerPreferences = 
 record {
   language: nat;
   playerChar: text;
 };
type PlayerName = text;
type PlayerId = principal;
type Player = 
 record {
   elo: float64;
   id: PlayerId;
   level: Level;
   name: PlayerName;
 };
type Level = nat;
type Cosmicrafts = 
 service {
   /// Rewards for users
   claimReward: (nat) -> (bool, text);
   createPlayer: (text) -> (bool, text);
   getAllPlayers: () -> (vec Player) query;
   getICPBalance: () -> (record {e8s: nat64;});
   getMyPlayerData: () -> (opt Player) query;
   getNFTUpgradeCost: () -> (Balance) query;
   /// PLAYERS LOGIC
   getPlayer: () -> (opt Player);
   getPlayerData: (principal) -> (opt Player) composite_query;
   getPlayerElo: (principal) -> (float64) query;
   getPlayerPreferences: () -> (opt PlayerPreferences);
   /// Player's rewards
   getUserRewards: () -> (vec RewardsUser);
   mergeSkinNFTs: (nat, nat) -> (bool, text);
   /// Mint Chests
   mintChest: (principal, nat) -> (bool, text);
   /// Mint deck with 8 units and random rarity within a range provided
   mintDeck: (principal, record {
                           nat;
                           nat;
                         }) -> (bool, text);
   mintNFT: (principal, nat, nat) -> (bool, text);
   /// Open chests
   openChests: (nat) -> (bool, text);
   savePlayerChar: (text) -> (bool, text);
   savePlayerLanguage: (nat) -> (bool, text);
   savePlayerName: (text) -> (bool);
   updatePlayerElo: (principal, float64) -> (bool);
   upgradeNFT: (TokenID) -> (bool, text);
 };
type Balance = nat;
service : () -> Cosmicrafts
