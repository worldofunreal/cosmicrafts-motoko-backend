type FullMatchData = record {
  status : MatchmakingStatus;
  gameId : nat;
  player1 : FullPlayerInfo;
  player2 : opt FullPlayerInfo;
};
type FullPlayerInfo = record {
  id : UserId;
  elo : float64;
  playerName : text;
  matchAccepted : bool;
  playerGameData : text;
};
type MatchData = record {
  status : MatchmakingStatus;
  gameId : nat;
  player1 : PlayerInfo;
  player2 : opt PlayerInfo;
};
type MatchmakingStatus = variant {
  Ended;
  Reserved;
  Searching;
  Accepted;
  InGame;
  Accepting;
};
type PlayerInfo = record {
  id : UserId;
  elo : float64;
  lastPlayerActive : nat64;
  matchAccepted : bool;
  playerGameData : text;
};
type PlayersCanister = service {
  cancelMatchmaking : () -> (bool, text);
  getAllSearching : () -> (vec MatchData) query;
  getMatchData : (nat) -> (opt MatchData) query;
  getMatchSearching : (text) -> (SearchStatus, nat, text);
  getMyMatchData : () -> (opt FullMatchData, nat) composite_query;
  isGameMatched : () -> (bool, text) query;
  setGameOver : (principal) -> (bool, bool, opt principal);
  setPlayerActive : () -> (bool);
};
type SearchStatus = variant { Available; NotAvailable; Assigned };
type UserId = principal;
service : PlayersCanister