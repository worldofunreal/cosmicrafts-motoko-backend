type PlayerID = principal;
type PrizeType = variant { Flux; Shards; Chest };
type Reward = record {
  id : nat;
  total : float64;
  name : text;
  end_date : nat64;
  prize_amount : nat;
  start_date : nat64;
  rewardType : RewardType;
  prize_type : PrizeType;
};
type RewardProgress = record { progress : float64; rewardType : RewardType };
type RewardType = variant { LevelReached; GamesCompleted; GamesWon };
type Rewards = service {
  addProgressToRewards : (principal, vec RewardProgress) -> (bool, text);
  addReward : (Reward) -> (bool, text, nat);
  claimedReward : (principal, nat) -> (bool, text);
  createReward : (text, RewardType, PrizeType, nat, float64, nat64) -> (
      bool,
      text,
    );
  getAllActiveRewards : () -> (nat, vec Reward) query;
  getAllUsersRewards : () -> (vec record { principal; vec RewardsUser }) query;
  getReward : (nat) -> (opt Reward) query;
  getUserReward : (PlayerID, nat) -> (opt RewardsUser) query;
  getUserRewards : (principal) -> (vec RewardsUser);
};
type RewardsUser = record {
  total : float64;
  id_reward : nat;
  prize_amount : nat;
  start_date : nat64;
  progress : float64;
  finish_date : nat64;
  expiration : nat64;
  rewardType : RewardType;
  finished : bool;
  prize_type : PrizeType;
};
service : () -> Rewards