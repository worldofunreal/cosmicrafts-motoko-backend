type RewardsUser = 
 record {
   expiration: nat64;
   finish_date: nat64;
   finished: bool;
   id_reward: nat;
   prize_amount: nat;
   prize_type: PrizeType;
   progress: float64;
   rewardType: RewardType;
   start_date: nat64;
   total: float64;
 };
type Rewards = 
 service {
   addProgressToRewards: (principal, vec RewardProgress) -> (bool, text);
   /// Functions for rewards
   addReward: (Reward) -> (bool, text, nat);
   claimedReward: (principal, nat) -> (bool, text);
   /// Function to create new rewards
   createReward: (text, RewardType, PrizeType, nat, float64, nat64) -> (
    bool, text);
   getAllActiveRewards: () -> (nat, vec Reward) query;
   getAllUsersRewards: () -> (vec record {
                                    principal;
                                    vec RewardsUser;
                                  }) query;
   getReward: (nat) -> (opt Reward) query;
   getUserReward: (PlayerID, nat) -> (opt RewardsUser) query;
   getUserRewards: (principal) -> (vec RewardsUser);
 };
type RewardType = 
 variant {
   GamesCompleted;
   GamesWon;
   LevelReached;
 };
type RewardProgress = 
 record {
   progress: float64;
   rewardType: RewardType;
 };
type Reward = 
 record {
   end_date: nat64;
   id: nat;
   name: text;
   prize_amount: nat;
   prize_type: PrizeType;
   rewardType: RewardType;
   start_date: nat64;
   total: float64;
 };
type PrizeType = 
 variant {
   Chest;
   Flux;
   Shards;
 };
type PlayerID = principal;
service : () -> Rewards
