type TokenID = nat;
type RewardsUser = 
 record {
   expiration: nat64;
   finish_date: nat64;
   finished: bool;
   id_reward: nat;
   prize_amount: nat;
   prize_type: PrizeType;
   progress: float64;
   rewardType: RewardType;
   start_date: nat64;
   total: float64;
 };
type RewardType = 
 variant {
   GamesCompleted;
   GamesWon;
   LevelReached;
 };
type PrizeType = 
 variant {
   Chest;
   Flux;
   Shards;
 };
type PlayerPreferences = 
 record {
   language: nat;
   playerChar: text;
 };
type PlayerName = text;
type PlayerId = principal;
type Player = 
 record {
   elo: float64;
   id: PlayerId;
   level: Level;
   name: PlayerName;
 };
type Level = nat;
type Balance = nat;
service : {
  claimReward: (nat) -> (bool, text);
  createPlayer: (text) -> (bool, text);
  getAllPlayers: () -> (vec Player) query;
  getICPBalance: () -> (record {e8s: nat64;});
  getMyPlayerData: () -> (opt Player) query;
  getNFTUpgradeCost: () -> (Balance) query;
  getPlayer: () -> (opt Player);
  getPlayerData: (principal) -> (opt Player) composite_query;
  getPlayerElo: (principal) -> (float64) query;
  getPlayerPreferences: () -> (opt PlayerPreferences);
  getUserRewards: () -> (vec RewardsUser);
  mergeSkinNFTs: (nat, nat) -> (bool, text);
  mintChest: (principal, nat) -> (bool, text);
  mintDeck: (principal) -> (bool, text);
  mintNFT: (principal, nat, nat) -> (bool, text);
  openChests: (nat) -> (bool, text);
  savePlayerChar: (text) -> (bool, text);
  savePlayerLanguage: (nat) -> (bool, text);
  savePlayerName: (text) -> (bool);
  updatePlayerElo: (principal, float64) -> (bool);
  upgradeNFT: (TokenID) -> (bool, text);
}
