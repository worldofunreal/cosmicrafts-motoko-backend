// Version: 1.0.0
type Account = {owner : Principal; subaccount : ?Subaccount};
type AccountBalances = StableTrieMap__1<EncodedAccount, Balance>;
type ArchiveData = {var canister : ArchiveInterface; var stored_txs : Nat};
type ArchiveInterface =
  actor {
    append_transactions : shared [Transaction] -> async Result<(), Text>;
    get_transaction : shared query TxIndex -> async ?Transaction;
    get_transactions :
      shared query GetTransactionsRequest -> async TransactionRange;
    remaining_capacity : shared query () -> async Nat;
    total_transactions : shared query () -> async Nat
  };
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Balance = Nat;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Burn =
  {amount : Balance; created_at_time : ?Nat64; from : Account; memo : ?Blob};
type EncodedAccount = Blob;
type GetTransactionsRequest = {length : Nat; start : TxIndex};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type MetaDatum = (Text, Value);
type Mint =
  {amount : Balance; created_at_time : ?Nat64; memo : ?Blob; to : Account};
type Result<Ok, Err> = {#err : Err; #ok : Ok};
type StableBuffer<X> =
  {var count : Nat; var elems : [var X]; initCapacity : Nat};
type StableBuffer__1<T> = StableBuffer<T>;
type StableTrieMap<K, V> = {var _size : Nat; var trie : Trie<K, V>};
type StableTrieMap__1<K, V> = StableTrieMap<K, V>;
type Subaccount = Blob;
type SupportedStandard = {name : Text; url : Text};
type Timestamp = Nat64;
type Transaction =
  {
    burn : ?Burn;
    index : TxIndex;
    kind : Text;
    mint : ?Mint;
    timestamp : Timestamp;
    transfer : ?Transfer
  };
type TransactionRange = {transactions : [Transaction]};
type Transfer =
  {
    amount : Balance;
    created_at_time : ?Nat64;
    fee : ?Balance;
    from : Account;
    memo : ?Blob;
    to : Account
  };
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
type TxIndex = Nat;
type Value = {#Blob : Blob; #Int : Int; #Nat : Nat; #Text : Text};
actor {
  stable token :
    {
      var _burned_tokens : Balance;
      var _fee : Balance;
      var _minted_tokens : Balance;
      accounts : AccountBalances;
      archive : ArchiveData;
      decimals : Nat8;
      max_supply : Balance;
      metadata : StableBuffer__1<MetaDatum>;
      min_burn_amount : Balance;
      minting_account : Account;
      name : Text;
      permitted_drift : Nat;
      supported_standards : StableBuffer__1<SupportedStandard>;
      symbol : Text;
      transaction_window : Nat;
      transactions : StableBuffer__1<Transaction>
    }
};
