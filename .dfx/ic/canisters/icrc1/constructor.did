type Account = record { owner : principal; subaccount : opt Subaccount };
type Account__1 = record { owner : principal; subaccount : opt Subaccount };
type AdvancedSettings = record {
  permitted_drift : Timestamp;
  burned_tokens : Balance;
  transaction_window : Timestamp;
};
type ArchivedTransaction = record {
  callback : QueryArchiveFn;
  start : TxIndex;
  length : nat;
};
type Balance = nat;
type Balance__1 = nat;
type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : Balance;
};
type BurnArgs = record {
  memo : opt vec nat8;
  from_subaccount : opt Subaccount;
  created_at_time : opt nat64;
  amount : Balance;
};
type GetTransactionsRequest = record { start : TxIndex; length : nat };
type GetTransactionsRequest__1 = record { start : TxIndex; length : nat };
type GetTransactionsResponse = record {
  first_index : TxIndex;
  log_length : nat;
  transactions : vec Transaction;
  archived_transactions : vec ArchivedTransaction;
};
type MetaDatum = record { text; Value };
type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : Balance;
};
type Mint__1 = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : Balance;
};
type QueryArchiveFn = func (GetTransactionsRequest__1) -> (
    TransactionRange,
  ) query;
type Subaccount = vec nat8;
type SupportedStandard = record { url : text; name : text };
type Timestamp = nat64;
type Token = service {
  burn : (BurnArgs) -> (TransferResult);
  deposit_cycles : () -> ();
  get_transaction : (TxIndex__1) -> (opt Transaction__1);
  get_transactions : (GetTransactionsRequest) -> (
      GetTransactionsResponse,
    ) query;
  icrc1_balance_of : (Account__1) -> (Balance__1) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (Balance__1) query;
  icrc1_metadata : () -> (vec MetaDatum) query;
  icrc1_minting_account : () -> (opt Account__1) query;
  icrc1_name : () -> (text) query;
  icrc1_pay_for_transaction : (TransferArgs, principal) -> (TransferResult);
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (Balance__1) query;
  icrc1_transfer : (TransferArgs) -> (TransferResult);
  mint : (Mint) -> (TransferResult);
};
type TokenInitArgs = record {
  fee : Balance;
  advanced_settings : opt AdvancedSettings;
  decimals : nat8;
  minting_account : opt Account;
  name : text;
  initial_balances : vec record { Account; Balance };
  min_burn_amount : Balance;
  max_supply : Balance;
  symbol : text;
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint__1;
  timestamp : Timestamp;
  index : TxIndex;
  transfer : opt Transfer;
};
type TransactionRange = record { transactions : vec Transaction };
type Transaction__1 = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint__1;
  timestamp : Timestamp;
  index : TxIndex;
  transfer : opt Transfer;
};
type Transfer = record {
  to : Account;
  fee : opt Balance;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : Balance;
};
type TransferArgs = record {
  to : Account;
  fee : opt Balance;
  memo : opt vec nat8;
  from_subaccount : opt Subaccount;
  created_at_time : opt nat64;
  amount : Balance;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : Balance };
  Duplicate : record { duplicate_of : TxIndex };
  BadFee : record { expected_fee : Balance };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  InsufficientFunds : record { balance : Balance };
};
type TransferResult = variant { Ok : TxIndex; Err : TransferError };
type TxIndex = nat;
type TxIndex__1 = nat;
type Value = variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
service : (TokenInitArgs) -> Token